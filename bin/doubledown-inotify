#!/bin/sh
set -e

LOCKFILE="/tmp/.doubledown-inotify-lock"

usage() {
	echo "Usage: $(basename $0) <local> [<user>@]<server>:<remote>" >&2
	[ -n "$1" ] && {
		echo "  <local>   local pathname to sync" >&2
		echo "  <user>    user that will connect to <remote>" >&2
		echo "  <server>  remote server" >&2
		echo "  <remote>  pathname to push to on <remote>" >&2
		echo "  -p        don't copy files" >&2
		echo "  -h|--help show this help message" >&2
		exit 0
	} || exit 1
}

[ "--help" = "$1" ] && usage help
while getopts h:p NAME
do
	case "$NAME" in
		h) usage help;;
		p) PRETEND="--dry-run";;
		*) usage;;
	esac
done

LOCAL=$(readlink -f "$1")
[ "$2" != "${2%%@*}" ] && USER="${2%%@*}"
SERVER="${2##*@}"; SERVER="${SERVER%%:*}"
REMOTE="${2##*:}"
[ -z "$LOCAL" ] && usage
[ -z "$USER" ] && usage
[ -z "$SERVER" ] && usage
[ -z "$REMOTE" ] && usage

FILTER="--exclude=$LOCKFILE --exclude=.rsync-filter*"
if [ -e "$LOCAL/.rsync-filter" ]
then
	FILTER="--exclude=$LOCKFILE --exclude=$LOCAL/.rsync-filter --filter=merge_$LOCAL/.rsync-filter"
fi

# check if we can use notify-send
export CAN_NOTIFY=`if type notify-send >/dev/null; then echo 1; else echo 0; fi`

# FIXME This does not work.  `doubledown-inotify` should wait on all its
# children before succumbing to `SIGINT`.  In practice, it's not a huge
# deal because the children run to completion.
trap wait 0 2

# Let `inotifywait`(1) gather all write events in the directory of interest
# and pass them to a child process for syncing.  The child process goes
# into the background so the `inotifywait` output reader can get back to
# business.  The shell will `wait`(2) with `WNOHANG` after every command to
# prevent piles of zombie processes from building up.
echo "# [doubledown-fsevents] syncing $LOCAL changes to $SERVER:$REMOTE" >&2

inotifywait -mrq \
	-e modify,attrib,move,move_self,create,delete \
	--format "%e %w%f" "$LOCAL" | while read LINE
do
	(
		EVENT="$(echo "$LINE" | cut -d" " -f1 | tr '[A-Z]' '[a-z]')"
		PATHNAME="$(echo "$LINE" | cut -d" " -f2-)"
		PATHNAME2="${PATHNAME##$LOCAL/}"
		case "$EVENT" in
			delete|moved_from)
				echo "$EVENT $REMOTE/$PATHNAME2"
				ssh "$USER@$SERVER" rm -d "$REMOTE/$PATHNAME2" 2>/dev/null
				if [ "$CAN_NOTIFY" -eq "1" ]; then 
					notify-send -t 500 "Removed $PATHNAME2" "$USER@$SERVER:\n- removed $PATHNAME2"; 
				fi
				echo "# [doubledown-inotify] removed $PATHNAME2" >&2;;
			*)
				echo "*) $EVENT"
				#since we are syncing the entire root now, lock around rync
				if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null;
				then
					trap 'rm -f "$LOCKFILE"; exit $?' INT TERM EXIT

					# rsync the entire folder if any file changes, this is so FILTER will work
					UPDATED="$(rsync $FILTER $PRETEND -aivzR --no-o "$LOCAL/./" "$USER@$SERVER:$REMOTE" 2>/dev/null | grep '^<' | cut -d' ' -f2 | sed "s/^/- /g")"
					if [ "$CAN_NOTIFY" -eq "1" ]; then 
						notify-send -t 500 "Sync Completed" "The following files were updated: \n$UPDATED"; 
					fi
					#echo "# [doubledown-inotify] uploaded $PATHNAME2" >&2;;
					echo "[Sync Complete] The following files were updated: \n$UPDATED" >&2;

					rm -f "$LOCKFILE"
					trap - INT TERM EXIT
				else
					echo "Failed to acquire lockfile: $LOCKFILE, rsync already running."
				fi;;
		esac
	) &
done
